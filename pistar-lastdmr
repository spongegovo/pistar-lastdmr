#!/usr/bin/env bash
 
# Ken Cormack
# May 2021
# https://github.com/kencormack/pistar-lastdmr
VERSION=0.99

###########################################################
# INITIALIZATION
###########################################################

# NOTE: This script was written for pi-star 4.1.4, for the DMR mode ONLY.
# If the logfile data changes in any way with future releases of pi-star,
# or if you want to display modes other than DMR (YSF, D-Star, P25, etc.)
# you will need to modify this script accordingly.  I only use DMR, so
# that's the mode I wrote this for.

set -o allexport

clear

SCRIPT="$(readlink -f "${0}")"
PARM="${1}"

# pi-star's log entries are stamped with UTC date and time stamps.
# We get the system's UTC offset (assuming timezone is set) so that
# we can convert those to the user's timezone and date format later.
UTC_OFFSET="$(date +%z)"
OFFSET_DIF="$(echo "${UTC_OFFSET}" | cut -c1)"
OFFSET_HRS="$(echo "${UTC_OFFSET}" | cut -c2-3)"
OFFSET_MIN="$(echo "${UTC_OFFSET}" | cut -c4-5)"

# Define some ways to make things bold, use different colors, and so on.
# See "man tput" for descriptions of each tput parameter used here.
SGR0="$(tput sgr0)"
BOLD="$(tput bold)"
# REV="$(tput rev)"
# BLINK="$(tput blink)"
# BLACK="$(tput setaf 0)"
RED="$(tput setaf 1)"
GREEN="$(tput setaf 2)"
YELLOW="$(tput setaf 3)"
BLUE="$(tput setaf 4)"
MAGENTA="$(tput setaf 5)"
CYAN="$(tput setaf 6)"
WHITE="$(tput setaf 7)"

# For grepping stuff that includes tabs
GTAB=$'\t'

# Find the latest log in the directory
LATEST_LOG="$(ls -1tr /var/log/pi-star/MMDVM*.log | tail -1)"
# Get it's fully qualified path
WORKING_LOG="$(readlink -f "${LATEST_LOG}")"

# Other DMR-related files we'll be consulting...
# These first two are supplied with, and updated by, pistar
DMRIDS=/usr/local/etc/DMRIds.dat
TGLIST=/usr/local/etc/TGList_BM.txt

# Users can create this next file to contain any DMR talkgroup
# names that are blank/empty in the pistar-supplied TGLIST above.
MY_LIST=/usr/local/etc/MY_LIST.txt

# This is the master DMR user.csv file.  We download this and
# update it if older than 7 days.
USERCSV=/usr/local/etc/user.csv

# See if figlet is installed.  If yes, then we'll be using it
# later on to display callsigns & talkgroups in a large font.
FIGLET=0
if command -v figlet > /dev/null 2>&1 && [[ "${PARM}" != "--nobig" ]]
then
  FIGLET=1
fi

###########################################################
# FUNCTIONS
###########################################################

fnCLEAR_CURRENT_LINE()
{
  echo -e -n "\r"
  tput el
}

fnVERSION()
{
  fnCLEAR_CURRENT_LINE
  echo "${BOLD}---------------------------${SGR0} pistar-lastdmr v${VERSION} ${BOLD}-------------------------------${SGR0}"
  echo -n "Listening for DMR Traffic... "
}

# This takes the DMR user's callsign and looks up the
# city, state, and country fields
fnCSV_SEARCH()
{
  # Fields in the file:
  # RADIO_ID,CALLSIGN,FIRST_NAME,LAST_NAME,CITY,STATE,COUNTRY
  # We want the last three.
  CSV_RECORD="$(grep ",${CSV_CALLSIGN}," "${USERCSV}" | cut -f5-7 -d"," | sort -u)"
  CITY="$(echo "${CSV_RECORD}" | cut -f1 -d",")"
  STATE="$(echo "${CSV_RECORD}" | cut -f2 -d",")"
  COUNTRY="$(echo "${CSV_RECORD}" | cut -f3 -d",")"
  # If any fields came back empty, set a default of "n/a" (not available)
  CITY=${CITY:-'n/a'}
  STATE=${STATE:-'n/a'}
  COUNTRY=${COUNTRY:-'n/a'}
}

fnCONVERT_TIMESTAMP()
{
  # Convert the log entry UTC date/timestamps to localized, human-readable form
  DATE_STAMP="$(echo "${RECORD}" | awk '{ print $2 }')"
  TIME_STAMP="$(echo "${RECORD}" | awk '{ print $3 }')"
  DATE_TIME="$(date -d "$(date -Iseconds -d "${DATE_STAMP} ${TIME_STAMP}") ${OFFSET_DIF} ${OFFSET_HRS} hours ${OFFSET_DIF} ${OFFSET_MIN} minutes")"
}

fnPAD_ABSENT_TG()
{
  # "private" call log entries lack "TG" in the log line, which skews
  # the data returned when awk parses positional fields.  These few
  # lines will inject a bogus "PC" (private contact) place-holder to
  # substitute for the missing "TG", so as not to skew positional fields
  # used by awk.  A hack, for sure, but a useful one.
  if echo "${RECORD}" | grep -q -E -i "voice header|data header|end of voice"
  then
    IS_TG="$(echo "${RECORD}" | grep " TG ")"
    if [[ "${IS_TG}" = "" ]]
    then
      RECORD="$(echo "${RECORD}" | sed 's/ to / to PC /')"
    fi
  fi
}

fnGET_DMR_FROM()
{
  FROM="$(echo "${RECORD}" | awk '{ print $12 }')"
  # See if the sender is a callsign...
  FROM_NAME="$(grep "${GTAB}${FROM}${GTAB}" "${DMRIDS}" | awk '{ print $NF }' | sort -u)"
  if [[ "${FROM_NAME}" = "" ]]
  then
    # If not, then see if it is a talkgroup
    FROM_NAME="$(grep "^${FROM};" "${TGLIST}" | cut -f3 -d";")"
  else
    if [[ -f "${USERCSV}" ]]
    then
      # If the recipient is a callsign, not a talkgroup, lookup
      # further info about that callsign in the user.csv file
      CSV_CALLSIGN="${FROM}"
      fnCSV_SEARCH
    fi
  fi
}

fnGET_DMR_TO()
{
  TO="$(echo "${RECORD}" | awk '{ print $15 }' | cut -f1 -d",")"
  # See if the recipient is a callsign
  TO_NAME="$(grep "${GTAB}${TO}${GTAB}" "${DMRIDS}" | awk '{ print $NF }' | sort -u)"
  # If not, then see if it is a talkgroup
  if [[ "${TO_NAME}" = "" ]]
  then
    TO_NAME="$(grep "^${TO};" "${TGLIST}" | cut -f3 -d";")"

    # Some talkgroups do not have names given, in the TGList_BM.txt
    # file that pi-star updates automatically.  These next few lines
    # allow the user to create a second lookup file in which they
    # can list talkgroups they use, that are not named in pi-star's
    # TGList_BM.txt file.
    #
    # This suplemental file is /usr/local/etc/MY_LIST.txt, and entries
    # in that file must be in the same format as the TGList_BM.txt file.
    # DO NOT INCLUDE SPACES.  Since pi-star will not overwrite your
    # MY_LIST.txt file, the info you list there will survive pi-star's
    # automated updates.
    #
    # Exactly as with the TGList_BM.txt file, the fields in MY_LIST.txt
    # include:

    #   Dest ID;Option;Name;Description
    #   Option: TG:0, REF:1, PC:2

    # Examples:
    #   2627;0;BADEN-WUERTTEMBERG;TG2627
    #   2629;0;SACHSEN/THUERINGEN;TG2629
    #   26232;0;DREILAENDERECK-MITTE-DEUTSCHLAND;TG26232
    #   26274;0;BW-BOEBLINGEN;TG26274
    #   26283;0;REGION-MUENCHEN;TG26283
    #   26287;0;ALLGAEU-BODENSEE;TG26287
    #   26298;0;THUERINGEN;TG26298
    #
    if [[ "${TO_NAME}" = "" ]] && [[ -f "${MY_LIST}" ]]
    then
      TO_NAME="$(grep "^${TO};" "${MY_LIST}" | cut -f3 -d";")"
    fi
  else
    # If the recipient is a callsign, not a talkgroup, lookup
    # further info about that callsign in the user.csv file
    if [[ -f "${USERCSV}" ]]
    then
      CSV_CALLSIGN="${TO}"
      fnCSV_SEARCH
    fi
  fi
}

fnBIG_FONT()
{
  # If you install "figlet", the script will detect it,
  # to add the large font display of the contact's callsign.
  # Otherwise, the large font callsign will be skipped, to
  # save screen space.
  #
  #     rpi-rw
  #     sudo apt install figlet
  #     rpi-ro
  #
  # However, even if figlet is installed, you can still turn
  # off the large font display callsign to save screen space,
  # by passing the "--nobig" parameter to this script:
  #
  #     pistar-lastdmr --nobig
  #
  if [[ ${FIGLET} -eq 1 ]]
  then
    echo -n "${BOLD}"
    figlet -f small "${FROM} ... ${TO}"
    echo -n "${SGR0}"
  fi
}

fnGET_DMR_VOICE_OR_DATA()
{
  # Determine if voice or data
  TYPE="$(echo "${RECORD}" | awk '{ print $9 }')"
  if [[ "${TYPE}" = "data" ]]
  then
    BLOCKS="$(echo "${RECORD}" | awk '{ print $16 }')"
    TYPE="${YELLOW}Data Transfer"
  else
    TYPE="${CYAN}Voice Call"
  fi
}

fnSHOW_DMR_CURRENT_CALL()
{
  # Show our human-readable date/time
  echo "When: ${BLUE}${BOLD}${DATE_TIME}${SGR0}${WHITE}"

  # Show formatted to and from names
  P_FROM_NAME="$(printf "%-15s" "(${FROM_NAME})")"
  P_TO_NAME="$(printf "%-15s" "(${TO_NAME})")"
  echo -e -n "From: ${BOLD}${FROM} ${P_FROM_NAME}${SGR0}\r"
  tput cuf 31
  echo " To: ${BOLD}${TO} ${P_TO_NAME}${SGR0}${WHITE}"

  # Show location details from the user.csv file
  if [[ "${CITY}" = "n/a" ]] && [[ "${STATE}" = "n/a" ]] && [[ "${COUNTRY}" = "n/a" ]]
  then
    echo "${MAGENTA}${BOLD}No Location Data Found${SGR0}${WHITE}"
  else
    echo -e "City: ${MAGENTA}${BOLD}${CITY}, ${STATE}, ${COUNTRY}${SGR0}${WHITE}"
  fi

  # show the time slot, source (RF or network), and type (voice or data)
  echo -e "Mode: ${CYAN}${BOLD}DMR TS${TIME_SLOT}${SGR0}${WHITE}\tSrc: ${CYAN}${BOLD}${SOURCE}${SGR0}${WHITE}\tType: ${BOLD}${TYPE}${SGR0}${WHITE}"
  echo -n "QSO In Progress... "
}

fnGET_DMR_NET_BER()
{
  # BER is in different positions, for network and RF log entries
  BER="$(echo "${RECORD}" | awk '{ print $NF }' | cut -f1 -d'%')"
}

fnGET_DMR_RF_BER()
{
  # BER is in different positions, for network and RF log entries
  BER="$(echo "${RECORD}" | awk '{ print $21 }' | cut -f1 -d"," | cut -f1 -d'%')"
}

fnCOLORIZE_BER()
{
  BER_COLOR="${WHITE}"
  # Good
  if [[ "$(expr "${BER}" '>=' 0.0)" -eq 1 ]] && [[ "$(expr "${BER}" '<=' 1.9)" -eq 1 ]]
  then
    BER_COLOR="${GREEN}"
  else
    # Fair
    if [[ "$(expr "${BER}" '>=' 2.0)" -eq 1 ]] && [[ "$(expr "${BER}" '<=' 4.9)" -eq 1 ]]
    then
      BER_COLOR="${YELLOW}"
    else
      # Poor
      if [[ "$(expr "${BER}" '>=' 5.0)" -eq 1 ]]
      then
        BER_COLOR="${RED}"
      fi
    fi
  fi
}

fnGET_DMR_LOSS()
{
  # Get the packet loss, and color-code it
  LOSS="$(echo "${RECORD}" | cut -f4 -d"," | awk '{ print $1 }' | sed 's/%//')"
}

fnCOLORIZE_LOSS()
{
  LOSS_COLOR="${WHITE}"
  # Good
  if [[ "$(expr "${LOSS}" '<=' 1.0)" -eq 1 ]]
  then
    LOSS_COLOR="${GREEN}"
  else
    # Fair
    if [[ "$(expr "${LOSS}" '>' 1.0)" -eq 1 ]] && [[ "$(expr "${LOSS}" '<' 3.0)" -eq 1 ]]
    then
      LOSS_COLOR="${YELLOW}"
    else
      # Poor
      if [[ "$(expr "${LOSS}" '>' 3.0)" -eq 1 ]]
      then
        LOSS_COLOR="${RED}"
      fi
    fi
  fi
}

fnGET_DMR_RSSI()
{
  # Get the RSSI and color-code it.
  # What follows converts RSSI dBm to S-Meter values.
  # We look for S9 through S1 signal strength...
  RSSI="$(echo "${RECORD}" | awk '{ print $23 }')"
  DBM="$(echo "${RSSI}" | cut -f1 -d"/" | cut -f2 -d"-")"
}

fnCOLORIZE_RSSI()
{
  # Very Strong
  SMETER_COLOR="${GREEN}"
  if [[ "${DBM}" -lt 93 ]]
  then
    # If stronger than S9, calculate how much over
    SMETER="S9+$((93-DBM))dB"
  else
    # Good
    if [[ "${DBM}" -eq 93 ]]
    then
      SMETER="S9"
    else
      if [[ "${DBM}" -ge 99 ]] && [[ "${DBM}" -lt 93 ]]
      then
        SMETER="S8"
      else
        if [[ "${DBM}" -ge 85 ]] && [[ "${DBM}" -lt 105 ]]
        then
          SMETER="S7"
        else
          # Fair
          SMETER_COLOR="${YELLOW}"
          if [[ "${DBM}" -ge 105 ]] && [[ "${DBM}" -lt 111 ]]
          then
            SMETER="S6"
          else
            if [[ "${DBM}" -ge 111 ]] && [[ "${DBM}" -lt 117 ]]
            then
              SMETER="S5"
            else
              if [[ "${DBM}" -ge 117 ]] && [[ "${DBM}" -lt 123 ]]
              then
                SMETER="S4"
              else
                if [[ "${DBM}" -ge 123 ]] && [[ "${DBM}" -lt 129 ]]
                then
                  SMETER="S3"
                else
                  # Poor
                  SMETER_COLOR="${RED}"
                  if [[ "${DBM}" -ge 129 ]] && [[ "${DBM}" -lt 135 ]]
                  then
                    SMETER="S2"
                  else
                    if [[ "${DBM}" -ge 135 ]] && [[ "${DBM}" -lt 141 ]]
                    then
                      SMETER="S1"
                    else
                      # Things are REALLY bad, if you can't even reach S1 signal strength
                      if [[ "${DBM}" -ge 141 ]]
                      then
                        SMETER="S0"
                      fi
                    fi
                  fi
                fi
              fi
            fi
          fi
        fi
      fi
    fi
  fi
}

fnDOWNLOAD_USERCSV()
{
  # If the user.csv file is missing, or is older than 7 days,
  # then download a new one from the web.
  if [[ ! -f "${USERCSV}" ]] || [[ -n "$(find "${USERCSV}" -mtime +7)" ]]
  then
    echo "Downloading latest user.csv file..."
    sudo mount -o remount,rw /
    if sudo wget -q --show-progress --progress=bar:force:noscroll https://database.radioid.net/static/user.csv -O "${USERCSV}.tmp"
    then
      echo "Applying the updated file..."
      if sudo mv "${USERCSV}.tmp" "${USERCSV}"
      then
        echo "Update complete."
        echo
        fnVERSION
      else
        echo "There was a problem applying the update.  Will continue without it."
        sleep 2
      fi
    else
      echo "Unable to retrieve latest user.csv.  Will continue without it."
      sleep 2
    fi
    sync
    sync
    sudo mount -o remount,ro /
  fi
}

###########################################################
# MAINLINE
###########################################################

# Begin by making sure we have an updated user.csv file
fnDOWNLOAD_USERCSV

# Main Loop - Watch the log for DMR traffic
tail -f "${WORKING_LOG}" | grep --line-buffered " DMR " | grep --line-buffered -v "Talker Alias" | while read -r RECORD
do
  fnCONVERT_TIMESTAMP

  # Determine DMR Time Slot, and RF or Network traffic
  TIME_SLOT="$(echo "${RECORD}" | awk '{ print $6 }' | cut -f1 -d",")"
  SOURCE="$(echo "${RECORD}" | awk '{ print $8 }' | sed 's/network/NET/')"

  # Compensate for shifting fields between "group" and "private" ID numbers
  fnPAD_ABSENT_TG

  if echo "${RECORD}" | grep -q -E -i "voice header|data header"
  then
    # A QSO has started...
    fnGET_DMR_FROM
    fnGET_DMR_TO
    fnCLEAR_CURRENT_LINE
    fnBIG_FONT
    fnGET_DMR_VOICE_OR_DATA
    fnSHOW_DMR_CURRENT_CALL
  else
    # The QSO has ended.
    # If it was voice traffic...
    if echo "${RECORD}" | grep -q "end of voice"
    then
      # The number of seconds the contact lasted
      SECS="$(echo "${RECORD}" | awk '{ print $18 }')"

      # If it was network traffic...
      if [[ "$(echo "${RECORD}" | grep "RSSI:")" = "" ]]
      then
        fnGET_DMR_NET_BER
        fnCOLORIZE_BER
        fnGET_DMR_LOSS
        fnCOLORIZE_LOSS

        fnCLEAR_CURRENT_LINE
        echo -e "\rDur:  ${BLUE}${BOLD}${SECS}${SGR0}${WHITE}sec\tBER: ${BER_COLOR}${BOLD}${BER}%${SGR0}${WHITE}\tLoss: ${LOSS_COLOR}${BOLD}${LOSS}%${SGR0}${WHITE}"
      else
        # Else, for RF traffic...
        fnGET_DMR_RF_BER
        fnCOLORIZE_BER
        fnGET_DMR_RSSI
        fnCOLORIZE_RSSI

        fnCLEAR_CURRENT_LINE
        echo -e "\rDur:  ${BLUE}${BOLD}${SECS}${SGR0}${WHITE}sec\tBER: ${BER_COLOR}${BOLD}${BER}%${SGR0}${WHITE}\tRSSI: ${SMETER_COLOR}${BOLD}${SMETER} (-${DBM} dBm)${SGR0}${WHITE}"
      fi
    else
      # It was data traffic...
      if echo "${RECORD}" | grep -q "ended network data"
      then
        echo "${YELLOW}${BOLD}End of Data Transmission (${BLOCKS} blocks)${SGR0}${WHITE}"
      fi
    fi
    fnVERSION
  fi

  # WE'VE COMPLETED PROCESSING OF THE LOG ENTRY.
  # CHECK TO SEE IF CURRENT LOG HAS BEEN ROTATED TO A NEW LOG
  LATEST_LOG="$(ls -1tr /var/log/pi-star/MMDVM*.log | tail -1)"
  NEW_LOG="$(readlink -f "${LATEST_LOG}")"

  # Compare the newest logfile name to the logfile name we've been using
  if [[ "${WORKING_LOG}" != "${NEW_LOG}" ]]
  then
    # If the logfile name has changed, re-launch this script
    # so that it can pick up the new latest log.
    exec "${SCRIPT}"
  fi
done
